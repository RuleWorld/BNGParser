group mcell;

prog2(parameters,molecules,species,reactions,observables,functions,compartments,boxes,compartmentsSurface)::=<<
time_step = 1.0e-6

TIME_STEP = time_step 
TIME_STEP_MAX = time_step 
ITERATIONS = 1000 
EFFECTOR_GRID_DENSITY = 10000 
INTERACTION_RADIUS = 0.001
VACANCY_SEARCH_DISTANCE=1
PARTITION_X = [ [-0.2 TO 0.2 STEP 0.01] ]
PARTITION_Y = [ [-0.2 TO 0.2 STEP 0.01] ]
PARTITION_Z = [ [-0.2 TO 0.2 STEP 0.01] ]

avogadro_constant = 6.02e23
<parameters; separator="\n">
DEFINE_MOLECULES{
  <molecules; separator="\n">
}

<if(compartmentsSurface)>
<boxes.keys:{b|
<b> BOX
{
  CORNERS = [-0.1,-0.1,-0.1] , [0.1,0.1,0.1]
  DEFINE_SURFACE_REGIONS
  {
    <boxes.(b)>
  }
  
}
}; separator="\n">
<else>
small_box BOX
{
CORNERS = [-0.1,-0.1,-0.1] , [0.1,0.1,0.1]
}
<endif>

INSTANTIATE my_world OBJECT 
{
  <species; separator = "\n">
  
  <boxes.keys:{b|my_box OBJECT <b> {}}; separator="\n">
  
}
DEFINE_REACTIONS
{
  <reactions; separator = "\n">
}

REACTION_DATA_OUTPUT
{
STEP = 1e-5
  <observables; separator = "\n">
}

>>

define_molecules(index,name,dimension,difussion)::=<<
  S<index> { D_<dimension>D = <difussion> } /*<name>*/
>>


parameter_def(id,value) ::=<<
<id> = <value>
>>

molecules_def(id,sites) ::= <<
<id>(<sites; separator = ".">)
>>

sites_def(id,states) ::= <<
>>



seed_species_block(id,concentration,isVolume,location) ::= <<
<if(isVolume)>
S<id>_release SPHERICAL_RELEASE_SITE {
  LOCATION = [<location>]
  SITE_DIAMETER = 0.196
  MOLECULE = S<id>
  NUMBER_TO_RELEASE = <concentration>
  }
<else>
 <id>' = <concentration>
<endif>

>>

seed_surface_species(id,concentration)::=<<
  <id>' = concentration
>>

create_surface_region(name,molecules)::=<<

    <name> 
    {
      ELEMENT_LIST = [ALL_ELEMENTS] 
      MOLECULE_NUMBER
      {
        <molecules: {m | S<m>};separator="\n">
      }
    }

>>

rule_seed_species_block(id,molecules,firstBonds,secondBonds) ::= <<
<molecules; separator="+">
>>


bond_template(firstElement,secondElement) ::= <<
  
>>


list_molecule_def(id,name,sites,compartment) ::= <<
<id>
>>

component_def(id,name,state,numberOfBonds)::= <<

>>

type_user_object(name) ::= "<name>"

reaction_block(id,name,reactant,product,rate,bidirectional,birate,leftMap,rightMap,operations,operator1,operator2,expression) ::=<<

   
>>

reaction_rules()::=<<

>>

reactions(reactant, product, rate,surfaceCompartment,reactantOrientation,productOrientation,factor)::=<<
  <if(surfaceCompartment)><reactant,reactantOrientation: {r,ro | S<r><ro>}; separator="+"> -\> <product,productOrientation: {p ,po| S<p><po>} ; separator="+"> [<rate>]
  <else><reactant: {r | S<r>}; separator="+"> -\> <product: {p | S<p>} ; separator="+"> [<rate>]
  <endif>
>>

groups_groups(groupList,name)::=<<
{<groupList; separator=" + ">}  => "dat/eq_<name>.dat"
>>
groups_block(id,name,type,patterns,times)::=<<
COUNT [S<id>,WORLD]<if(times)>*<times><endif>
>>

patterns_block(id,molecules)::=<<
>>

functions_block(id,referencesName,referencesType,expression)::=<<
>>

compartments_block(id,dimensions,size,outside)::=<<
>>

compartments_volume_block(id,size,outside)::=<<
>>

compartments_surface_block(id,size,outside)::=<<
  <id>{REFLECTIVE = A REFLECTIVE = B}  
>>

observables_block()::=<<

>>





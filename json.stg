group xml;

typeInitMap ::= [
   "Integer":  "0",
    "long":    "1",
    default:   "null"
]

prog2(parameters,molecules,species,reactions,observables,functions,compartments) ::= <<
{
"model":{
    "ListOfParameters": [
        <parameters; separator=",\n">
    ],
    "ListOfMoleculeTypes": [
        <molecules; separator=",\n">
    ],
    
    "ListOfSpecies":[
        <species; separator=",\n">
    ],
    "ListOfCompartments": [
      <compartments; separator=",\n">
    ],
    "ListOfReactionRules": [
        <reactions; separator=",\n">
    ],
    "ListOfObservables": [
        <observables; separator=",\n">
    ],
    "ListOfFunctions": [
        <functions; separator=",\n">
    ]
  }
}
>>

parameter_def(id,value) ::=<<
  {
    "id" : "<id>",
    "type" : "Constant", 
    "value" : "<value>"
  }
>>

molecules_def(id,sites) ::= <<
 <if(sites)>
 {
   "id" : "<id>",
   "ComponentTypes": [
      <sites; separator=",\n">  
   ]    
 }
 <else>
 {
   "id" : "<id>"
 } <endif>
>>

sites_def(id,states) ::= <<
   <if(states)>
   {
    "id" : "<id>",   
    "ListOfAllowedStates": [
       <states: { st | {"id" : "<st>"}}; separator=",\n">
    ]
   }
   <else>
   { "id=" : "<id>" } <endif>
>>



seed_species_block(id,concentration,name,molecules,firstBonds,secondBonds) ::= <<
  {
    "id" : "<id>",
    "concentration" : "<concentration>",
    "name" : "<name>",
    <rule_seed_species_block(id=id,molecules=molecules,firstBonds=firstBonds,secondBonds=secondBonds)>
  }
>>

rule_seed_species_block(id,molecules,firstBonds,secondBonds) ::= <<
  "ListOfMolecules":  [
      <molecules; separator=",\n">
   ]<if(firstBonds)>,
  "ListOfBonds" :[
    <firstBonds,secondBonds:{ firstBond,secondBond |
    \{ 
      "id" : "<id>_B<i>",
      "site1" : "<firstBond>",  
      "site2" : "<secondBond>" 
      \} };separator=",\n">
    ] <endif>
>>


bond_template(firstElement,secondElement) ::= <<
  
>>


list_molecule_def(id,name,sites,compartment) ::= <<
{
"id" : "<id>", 
"name" : "<name>", 
<if(compartment)>"compartment" : "<compartment>",<endif>
"ListOfComponents": [
    <sites; separator=",\n">
]
}
>>

component_def(id,name,state,numberOfBonds)::= <<
{
  "id" : "<id>",
  "name" : "<name>",
  <if(state)> "state" : "<state>", <endif> 
  "numberOfBonds" : "<numberOfBonds>"
}
>>

type_user_object(name) ::= "<name>"

reaction_block(id,name,reactant,product,rate,bidirectional,birate,leftMap,rightMap,operations,operator1,operator2,expression) ::=<<
{ 
  "id" : "<id>",
  "name" : "<name>",
  "expression"  : "<expression>",
   "ListOfReactantPatterns" :  [
      <reactant: {react | 
      \{
        "id" : "<id>_RP<i>",  
        <react> 
      \}
      }; separator=",\n">
   ],
   "ListOfProductPatterns" : [
    <product: {prot |
    \{
      "id" : "<id>_PP<i>" ,
      <prot> 
    \} }; separator=",\n">
   ],
  "RateLaw" : { 
    "ListOfRateConstants" : [
      { "value" : "<rate>" } 
    ] 
  },
  "Map" : [
     <leftMap,rightMap:{ left,right |    \{
        "sourceID" : "<left>", 
        "targetID" : "<right>"
   \} };separator=",\n">
     
  ], 
  "ListOfOperations" : [
    <operations,operator1,operator2:{oper,op1,op2 | \{
        "operation" : "<oper>",
        "site1 ": "<op1>",
        "site2" : "<op2>"
      \} };separator=",\n">
  ]
} 
>>

reaction_rules()::=<<

>>


observables_block(id,name,type,patterns)::=<<
  {
    "id" : "id",
    "name" : "name",
    "type" : "type",
    "ListOfPatterns" : [
      <patterns ; separator = ",">
    ]
  }
>>

patterns_block(id,molecules)::=<<
   <molecules:{pattern |
   \{
    "id" : "<id>_P<i>",
    <pattern>
   \} }; separator=",\n">
>>

functions_block(id,referencesName,referencesType,expression)::=<<
{
  "id" : "<id>"
  "Expression" : "<expression>"
  "ListOfReferences" : {
        <referencesName,referencesType:{ left,right | \{
        "name": "<left>", 
        "type ": "<right>" \} };separator=",\n">
  }
}
>>

compartments_block(id,dimensions,size,outside)::=<<
   { 
      "id" : "<id>", 
      "spatialDimensions" : "dimensions",
        <if(outside)>"outside" : "<outside>",<endif>
      "size" : "size" 
   }
>>




